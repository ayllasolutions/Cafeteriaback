const ea = require("./ExamplesAssist")
const aspose_barcode = ea.aspose_barcode
let BarcodeGenerator = aspose_barcode.BarcodeGenerator;
let EncodeTypes = aspose_barcode.EncodeTypes;

class BarcodeGeneratorExamples
{
    subfolder = "resources/generating/";

    howToGenerateBarcodeImage()
    {
        console.log("\n---\nfunction '" + this.howToGenerateBarcodeImage.name + "'\n");
        let encode_type = EncodeTypes.CODE_128;
        let generator = new BarcodeGenerator(encode_type, null);
        generator.setCodeText("123ABC");
        generator.save(this.subfolder + "howToGenerateBarcodeImage.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("image saved to " + this.subfolder + "howToGenerateBarcodeImage.png");
    }

    howToSave()
    {
        console.log("\n---\nfunction '" + this.howToSave.name + "'\n");
        let type_expected = EncodeTypes.AZTEC;
        let code_text_expected = "123678943";
        let generator = new BarcodeGenerator(type_expected, code_text_expected);
        generator.save(this.subfolder + "howToSave.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("image saved to " + this.subfolder + "howToSave.png");
    }

    howToGenerateBase64Image()
    {
        let gen = new BarcodeGenerator(EncodeTypes.MACRO_PDF_417, "1234567");
        let base64EncodedImage = gen.generateBarCodeImage(aspose_barcode.BarCodeImageFormat.PNG);
        ea.saveImageBase64(base64EncodedImage, this.subfolder + "howToGenerateBase64Image.png")
        console.log("image saved to " + this.subfolder + "howToGenerateBase64Image.png");
    }

    howToSetBarcodeType()
    {
        console.log("\n---\nfunction '" + this.howToSetBarcodeType.name + "'\n");
        let generator = new BarcodeGenerator(EncodeTypes.CODE_128, "12367891011");
        let type_expected = EncodeTypes.CODABAR;
        generator.setBarcodeType(type_expected);
        generator.save(this.subfolder + "howToSetBarcodeType.png", aspose_barcode.BarCodeImageFormat.PNG);
        let type_actual = generator.getBarcodeType();
        console.log("type_expected = " + type_expected + "\n");
        console.log("type_actual = " + type_actual + "\n");
        console.log("image saved to " + this.subfolder + "howToSetBarcodeType.png");
    }

    howToGetCodeText()
    {
        console.log("\n---\nfunction '" + this.howToGetCodeText.name + "'\n");
        let expected = "1234567890DCBV";
        let generator = new BarcodeGenerator(EncodeTypes.CODE_128, expected);
        generator.save(this.subfolder + "howToGetCodeText.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("CodeText = " + generator.getCodeText());
        console.log("image saved to " + this.subfolder + "howToGetCodeText.png");

    }

    howToGenerateOneD()
    {
        console.log("\n---\nfunction '" + this.howToGenerateOneD.name + "'\n");
        let codeText = '01234567';
        let encodeType = EncodeTypes.CODE_39_STANDARD;
        let generator = new BarcodeGenerator(encodeType, codeText);
        generator.save(this.subfolder + "howToGenerateOneD.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("image saved to " + this.subfolder + "howToGenerateOneD.png");
    }

    howToGenerateTwoD()
    {
        console.log("\n---\nfunction '" + this.howToGenerateTwoD.name + "'\n");
        let codeText = '01234567';
        let encodeType = EncodeTypes.QR;
        let generator = new BarcodeGenerator(encodeType, codeText);
        generator.save(this.subfolder + "howToGenerateTwoD.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("image saved to " + this.subfolder + "howToGenerateTwoD.png");
    }

    howToSetBackColor()
    {
        console.log("\n---\nfunction '" + this.howToSetBackColor.name + "'\n");
        let color_expected = "#FF0000";
        let generator = new BarcodeGenerator(EncodeTypes.CODE_39_STANDARD, '01234567');
        generator.getParameters().setBackColor(color_expected);
        let color_actual = generator.getParameters().getBackColor();
        generator.save(this.subfolder + "howToSetBackColor.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("color_expected = " + color_expected + "\n");
        console.log("color_actual = " + color_actual + "\n");
        console.log("image saved to " + this.subfolder + "howToSetBackColor.png");
    }

    howToGetDefaultBackColor()
    {
        console.log("\n---\nfunction '" + this.howToGetDefaultBackColor.name + "'\n");
        let color_expected = "#FFFFFF";
        let generator = new BarcodeGenerator(EncodeTypes.CODE_39_STANDARD, '01234567');
        let color_actual = generator.getParameters().getBackColor();
        generator.save(this.subfolder + "howToGetDefaultBackColor.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("color_expected = " + color_expected + "\n");
        console.log("color_actual = " + color_actual + "\n");
        console.log("image saved to " + this.subfolder + "howToGetDefaultBackColor.png");
    }

    howToGetDefaultBarColor()
    {
        console.log("\n---\nfunction '" + this.howToGetDefaultBarColor.name + "'\n");
        let color_expected = "#000000";
        let generator = new BarcodeGenerator(EncodeTypes.CODE_39_STANDARD, '01234567');
        let color_actual = generator.getParameters().getBarcode().getBarColor();
        generator.save(this.subfolder + "howToGetDefaultBarColor.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("color_expected = " + color_expected + "\n");
        console.log("color_actual = " + color_actual + "\n");
        console.log("image saved to " + this.subfolder + "howToGetDefaultBarColor.png");
    }

    howToSetBarColor()
    {
        console.log("\n---\nfunction '" + this.howToSetBarColor.name + "'\n");
        let color_expected = "#FA00AA";
        let generator = new BarcodeGenerator(EncodeTypes.CODE_39_STANDARD, '01234567');
        generator.getParameters().getBarcode().setBarColor(color_expected);
        let color_actual = generator.getParameters().getBarcode().getBarColor();
        generator.save(this.subfolder + "howToSetBarColor.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("color_expected = " + color_expected + "\n");
        console.log("color_actual = " + color_actual + "\n");
        console.log("image saved to " + this.subfolder + "howToSetBarColor.png");
    }

    howToSetCodeText()
    {
        console.log("\n---\nfunction '" + this.howToSetCodeText.name + "'\n");
        let encode_type = EncodeTypes.CODE_128;
        let generator = new BarcodeGenerator(encode_type, null);
        let expected = "555777";
        generator.setCodeText(expected);
        let actual = generator.getCodeText();
        generator.save(this.subfolder + "howToSetCodeText.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("CodeText actual = " + actual + "\n");
        console.log("CodeText expected = " + expected + "\n");
        console.log("image saved to " + this.subfolder + "howToSetCodeText.png");
    }


    howToGetBarcodeTypeAndCodeText()
    {
        console.log("\n---\nfunction '" + this.howToGetBarcodeTypeAndCodeText.name + "'\n");
        let encode_type_expected = EncodeTypes.AZTEC;
        let code_text_expected = "444555777665";
        let generator = new BarcodeGenerator(encode_type_expected, code_text_expected);
        let encode_type_actual = generator.getBarcodeType();
        let code_text_actual = generator.getCodeText();
        generator.save(this.subfolder + "howToGetBarcodeTypeAndCodeText.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("code text actual = " + code_text_actual + "\n");
        console.log("code text expected = " + code_text_expected + "\n");
        console.log("encode type actual = " + encode_type_actual + "\n");
        console.log("encode type expected = " + encode_type_expected + "\n");
        console.log("image saved to " + this.subfolder + "howToGetBarcodeTypeAndCodeText.png");
    }

    howToGetDefaultDashStyle()
    {
        console.log("\n---\nfunction '" + this.howToGetDefaultDashStyle.name + "'\n");
        let dash_style_expected = BorderDashStyle.SOLID;
        let generator = new BarcodeGenerator(EncodeTypes.CODE_39_STANDARD, '01234567');
        let dash_style_actual = generator.getParameters().getBorder().getDashStyle();
        generator.save(this.subfolder + "howToGetDefaultDashStyle.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("dash_style_actual = " + dash_style_actual + "\n");
        console.log("dash_style_expected" + dash_style_expected + "\n");
        console.log("image saved to " + this.subfolder + "howToGetDefaultDashStyle.png");
    }

    howToDefaultBorderColor()
    {
        console.log("\n---\nfunction '" + this.howToDefaultBorderColor.name + "'\n");
        let border_color_expected = "#000000";
        let generator = new BarcodeGenerator(EncodeTypes.CODE_39_STANDARD, '01234567');
        let border_color_actual = generator.getParameters().getBorder().getColor();
        generator.save(this.subfolder + "howToDefaultBorderColor.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("border_color_expected = " + border_color_expected + "\n");
        console.log("border_color_actual = " + border_color_actual + "\n");
        console.log("image saved to " + this.subfolder + "howToDefaultBorderColor.png");
    }

    howToSetBorderColor()
    {
        console.log("\n---\nfunction '" + this.howToSetBorderColor.name + "'\n");
        let border_color_expected = "#AA00BB";
        let generator = new BarcodeGenerator(EncodeTypes.CODE_39_STANDARD, '01234567');
        generator.getParameters().getBorder().setColor(border_color_expected);
        let border_color_actual = generator.getParameters().getBorder().getColor();
        generator.save(this.subfolder + "howToSetBorderColor.png", aspose_barcode.BarCodeImageFormat.PNG);
        console.log("border_color_expected = " + border_color_expected + "\n");
        console.log("border_color_actual = " + border_color_actual + "\n");
    }

    howToSetFont()
    {
        console.log("\n---\nfunction '" + this.howToSetFont.name + "'\n");
        let generator = new BarcodeGenerator(EncodeTypes.CODE_128, null);
        generator.getParameters().getCaptionAbove().setText("CAPTION ABOOVE");
        generator.getParameters().getCaptionAbove().setVisible(true);
        generator.getParameters().getCaptionAbove().getFont().setStyle(FontStyle.ITALIC);
        generator.getParameters().getCaptionAbove().getFont().getSize().setPoint(5);
        let save_path = this.subfolder + "howToSetFont.bmp";
        generator.save(save_path, aspose_barcode.BarCodeImageFormat.BMP);
        console.log("image saved to " + save_path);
    }
}

ea.setLicense();
let barcodeGeneratorExamples = new BarcodeGeneratorExamples();
barcodeGeneratorExamples.howToGenerateBarcodeImage();
barcodeGeneratorExamples.howToGenerateBase64Image();
barcodeGeneratorExamples.howToGetCodeText();
barcodeGeneratorExamples.howToGenerateOneD();
barcodeGeneratorExamples.howToGenerateTwoD();
barcodeGeneratorExamples.howToSetBackColor();
barcodeGeneratorExamples.howToGetDefaultBackColor();
barcodeGeneratorExamples.howToGetDefaultBarColor();
barcodeGeneratorExamples.howToSetBarColor();
barcodeGeneratorExamples.howToSetCodeText();
barcodeGeneratorExamples.howToGetBarcodeTypeAndCodeText();
barcodeGeneratorExamples.howToGetDefaultDashStyle();
barcodeGeneratorExamples.howToDefaultBorderColor();
barcodeGeneratorExamples.howToSetBorderColor();
barcodeGeneratorExamples.howToSave();
barcodeGeneratorExamples.howToSetBarcodeType();
barcodeGeneratorExamples.howToSetFont();